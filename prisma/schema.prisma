// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AuctionStatus {
  PENDING
  ACTIVE
  ENDED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum NotificationType {
  OUTBID
  AUCTION_WON
  AUCTION_ENDED
  PAYMENT_CONFIRMED
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  LastName      String?
  name          String?
  email         String?   @unique
  password      String
  createdAt     DateTime  @default(now())
  emailVerified DateTime? @map("email_verified")
  image         String?
  auctions      Auction[] @relation("SellerAuctions")
  Bids          Bid[]     @relation("UserBids")
  accounts      Account[]
  sessions      Session[]
  wonAuctions   Auction[] @relation("AuctionWinner")

  @@map("users")
}

model Auction {
  id              String        @id @default(cuid())
  title           String
  description     String?
  startPrice      Float
  currentBid      Float         @default(0)
  reservePrice    Float?
  minBidIncrement Float         @default(1.0)
  startsAt        DateTime?
  status          AuctionStatus @default(PENDING)
  winnerId        String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  winner          User?         @relation("AuctionWinner", fields: [winnerId], references: [id])
  endsAt          DateTime
  sellerId        String
  seller          User          @relation("SellerAuctions", fields: [sellerId], references: [id])
  bids            Bid[]         @relation("AuctionBids")
  images          Image[]       @relation("AuctionImages")

  @@index([startsAt, endsAt, status])
  @@index([sellerId])
  @@map("auctions")
}

model Bid {
  id        String  @id @default(cuid())
  amount    Float
  auctionId String
  userId    String
  auction   Auction @relation("AuctionBids", fields: [auctionId], references: [id])
  User      User    @relation("UserBids", fields: [userId], references: [id])

  @@map("bids")
}

model Image {
  id        String   @id @default(cuid())
  url       String?
  auctionId String
  createdAt DateTime @default(now())
  auction   Auction  @relation("AuctionImages", fields: [auctionId], references: [id])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
